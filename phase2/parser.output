Nonterminals useless in grammar

    op


Terminals unused in grammar

    UMINUS


State 21 conflicts: 1 shift/reduce, 1 reduce/reduce
State 154 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | expr OP_PLUS expr
   15     | expr OP_MINUS expr
   16     | expr OP_ASTERISK expr
   17     | expr OP_SLASH expr
   18     | expr OP_PERCENTAGE expr
   19     | expr OP_GREATER expr
   20     | expr OP_GREATER_EQ expr
   21     | expr OP_LESSER expr
   22     | expr OP_LESSER_EQ expr
   23     | expr OP_EQ_EQ expr
   24     | expr OP_NOT_EQ expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: LEFT_PAR expr RIGHT_PAR
   29     | OP_MINUS expr
   30     | NOT expr
   31     | OP_PLUS_PLUS lvalue
   32     | lvalue OP_PLUS_PLUS
   33     | OP_MINUS_MINUS lvalue
   34     | lvalue OP_MINUS_MINUS
   35     | primary

   36 assignexpr: lvalue OP_EQUALS expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | LEFT_PAR funcdef RIGHT_PAR
   41        | const

   42 lvalue: IDENTIFIER
   43       | LOCAL IDENTIFIER
   44       | COL_COL IDENTIFIER
   45       | member

   46 member: lvalue DOT IDENTIFIER
   47       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   48       | call DOT IDENTIFIER
   49       | call LEFT_BRACKET expr RIGHT_BRACKET

   50 call: call LEFT_PAR elist RIGHT_PAR
   51     | lvalue callsuffix
   52     | LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: LEFT_PAR elist RIGHT_PAR

   56 methodcall: DOT_DOT IDENTIFIER LEFT_PAR elist RIGHT_PAR

   57 elist: expr
   58      | expr COMMA elist
   59      | %empty

   60 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   61          | LEFT_BRACKET indexed RIGHT_BRACKET
   62          | LEFT_BRACKET RIGHT_BRACKET

   63 indexed: indexedelem
   64        | indexedelem COMMA indexed
   65        | %empty

   66 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   67 func_stmt: stmt func_stmt
   68          | stmt

   69 $@1: %empty

   70 block: LEFT_BRACE $@1 RIGHT_BRACE

   71 $@2: %empty

   72 block: LEFT_BRACE $@2 func_stmt RIGHT_BRACE

   73 $@3: %empty

   74 funcdef: FUNCTION LEFT_PAR $@3 idlist RIGHT_PAR block

   75 $@4: %empty

   76 $@5: %empty

   77 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR block

   78 const: INTEGER
   79      | REAL
   80      | STRING
   81      | NIL
   82      | TRUE
   83      | FALSE

   84 idlist: IDENTIFIER
   85       | IDENTIFIER COMMA idlist
   86       | %empty

   87 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt
   88       | IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

   89 $@6: %empty

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR $@6 stmt

   91 $@7: %empty

   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@7 stmt

   93 returnstmt: RETURN SEMICOLON
   94           | RETURN expr SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <intVal> (258) 78
    REAL <realVal> (259) 79
    STRING <strVal> (260) 80
    IDENTIFIER <strVal> (261) 42 43 44 46 48 56 77 84 85
    IF <strVal> (262) 87 88
    ELSE <strVal> (263) 88
    WHILE <strVal> (264) 90
    FOR <strVal> (265) 92
    FUNCTION <strVal> (266) 74 77
    RETURN <strVal> (267) 93 94
    BREAK <strVal> (268) 8
    CONTINUE <strVal> (269) 9
    AND <strVal> (270) 25
    NOT <strVal> (271) 30
    OR <strVal> (272) 26
    LOCAL <strVal> (273) 43
    TRUE <strVal> (274) 82
    FALSE <strVal> (275) 83
    NIL <strVal> (276) 81
    OP_EQUALS <strVal> (277) 36
    OP_PLUS <strVal> (278) 14
    OP_MINUS <strVal> (279) 15 29
    OP_ASTERISK <strVal> (280) 16
    OP_SLASH <strVal> (281) 17
    OP_PERCENTAGE <strVal> (282) 18
    OP_EQ_EQ <strVal> (283) 23
    OP_NOT_EQ <strVal> (284) 24
    OP_PLUS_PLUS <strVal> (285) 31 32
    OP_MINUS_MINUS <strVal> (286) 33 34
    OP_GREATER <strVal> (287) 19
    OP_LESSER <strVal> (288) 21
    OP_GREATER_EQ <strVal> (289) 20
    OP_LESSER_EQ <strVal> (290) 22
    LEFT_BRACE <strVal> (291) 66 70 72
    RIGHT_BRACE <strVal> (292) 66 70 72
    LEFT_BRACKET <strVal> (293) 47 49 60 61 62
    RIGHT_BRACKET <strVal> (294) 47 49 60 61 62
    LEFT_PAR <strVal> (295) 28 40 50 52 55 56 74 77 87 88 90 92
    RIGHT_PAR <strVal> (296) 28 40 50 52 55 56 74 77 87 88 90 92
    SEMICOLON <strVal> (297) 3 8 9 12 92 93 94
    COMMA <strVal> (298) 58 64 85
    COLON <strVal> (299) 66
    COL_COL <strVal> (300) 44
    DOT <strVal> (301) 46 48
    DOT_DOT <strVal> (302) 56
    UMINUS (303)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 67 68 87 88 90 92
    expr (52)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 47 49 57 58 66 87 88 90 92 94
    term (53)
        on left: 28 29 30 31 32 33 34 35
        on right: 27
    assignexpr (54)
        on left: 36
        on right: 13
    primary (55)
        on left: 37 38 39 40 41
        on right: 35
    lvalue (56)
        on left: 42 43 44 45
        on right: 31 32 33 34 36 37 46 47 51
    member (57)
        on left: 46 47 48 49
        on right: 45
    call (58)
        on left: 50 51 52
        on right: 38 48 49 50
    callsuffix (59)
        on left: 53 54
        on right: 51
    normcall (60)
        on left: 55
        on right: 53
    methodcall (61)
        on left: 56
        on right: 54
    elist (62)
        on left: 57 58 59
        on right: 50 52 55 56 58 60 92
    objectdef (63)
        on left: 60 61 62
        on right: 39
    indexed (64)
        on left: 63 64 65
        on right: 61 64
    indexedelem (65)
        on left: 66
        on right: 63 64
    func_stmt (66)
        on left: 67 68
        on right: 67 72
    block (67)
        on left: 70 72
        on right: 10 74 77
    $@1 (68)
        on left: 69
        on right: 70
    $@2 (69)
        on left: 71
        on right: 72
    funcdef (70)
        on left: 74 77
        on right: 11 40 52
    $@3 (71)
        on left: 73
        on right: 74
    $@4 (72)
        on left: 75
        on right: 77
    $@5 (73)
        on left: 76
        on right: 77
    const (74)
        on left: 78 79 80 81 82 83
        on right: 41
    idlist (75)
        on left: 84 85 86
        on right: 74 77 85
    ifstmt (76)
        on left: 87 88
        on right: 4
    whilestmt (77)
        on left: 90
        on right: 5
    $@6 (78)
        on left: 89
        on right: 90
    forstmt (79)
        on left: 92
        on right: 6
    $@7 (80)
        on left: 91
        on right: 92
    returnstmt (81)
        on left: 93 94
        on right: 7


State 0

    0 $accept: . program $end

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   78 const: INTEGER .

    $default  reduce using rule 78 (const)


State 2

   79 const: REAL .

    $default  reduce using rule 79 (const)


State 3

   80 const: STRING .

    $default  reduce using rule 80 (const)


State 4

   42 lvalue: IDENTIFIER .

    $default  reduce using rule 42 (lvalue)


State 5

   87 ifstmt: IF . LEFT_PAR expr RIGHT_PAR stmt
   88       | IF . LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

    LEFT_PAR  shift, and go to state 42


State 6

   90 whilestmt: WHILE . LEFT_PAR expr RIGHT_PAR $@6 stmt

    LEFT_PAR  shift, and go to state 43


State 7

   92 forstmt: FOR . LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@7 stmt

    LEFT_PAR  shift, and go to state 44


State 8

   74 funcdef: FUNCTION . LEFT_PAR $@3 idlist RIGHT_PAR block
   77        | FUNCTION . IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 45
    LEFT_PAR    shift, and go to state 46


State 9

   93 returnstmt: RETURN . SEMICOLON
   94           | RETURN . expr SEMICOLON

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 47
    COL_COL         shift, and go to state 24

    expr        go to state 48
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 49


State 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 12

   30 term: NOT . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 13

   43 lvalue: LOCAL . IDENTIFIER

    IDENTIFIER  shift, and go to state 52


State 14

   82 const: TRUE .

    $default  reduce using rule 82 (const)


State 15

   83 const: FALSE .

    $default  reduce using rule 83 (const)


State 16

   81 const: NIL .

    $default  reduce using rule 81 (const)


State 17

   29 term: OP_MINUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 18

   31 term: OP_PLUS_PLUS . lvalue

    IDENTIFIER  shift, and go to state 4
    LOCAL       shift, and go to state 13
    LEFT_PAR    shift, and go to state 54
    COL_COL     shift, and go to state 24

    lvalue  go to state 55
    member  go to state 32
    call    go to state 56


State 19

   33 term: OP_MINUS_MINUS . lvalue

    IDENTIFIER  shift, and go to state 4
    LOCAL       shift, and go to state 13
    LEFT_PAR    shift, and go to state 54
    COL_COL     shift, and go to state 24

    lvalue  go to state 57
    member  go to state 32
    call    go to state 56


State 20

   70 block: LEFT_BRACE . $@1 RIGHT_BRACE
   72      | LEFT_BRACE . $@2 func_stmt RIGHT_BRACE

    RIGHT_BRACE  reduce using rule 69 ($@1)
    $default     reduce using rule 71 ($@2)

    $@1  go to state 58
    $@2  go to state 59


State 21

   60 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   61          | LEFT_BRACKET . indexed RIGHT_BRACKET
   62          | LEFT_BRACKET . RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 60
    LEFT_BRACKET    shift, and go to state 21
    RIGHT_BRACKET   shift, and go to state 61
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    RIGHT_BRACKET  [reduce using rule 59 (elist)]
    RIGHT_BRACKET  [reduce using rule 65 (indexed)]

    expr         go to state 62
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 63
    objectdef    go to state 34
    indexed      go to state 64
    indexedelem  go to state 65
    const        go to state 37


State 22

   28 term: LEFT_PAR . expr RIGHT_PAR
   40 primary: LEFT_PAR . funcdef RIGHT_PAR
   52 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 8
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 66
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 67
    const       go to state 37


State 23

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 24

   44 lvalue: COL_COL . IDENTIFIER

    IDENTIFIER  shift, and go to state 68


State 25

    0 $accept: program . $end

    $end  shift, and go to state 69


State 26

    1 program: stmt . program

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 70
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON
   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    SEMICOLON      shift, and go to state 84


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . OP_PLUS_PLUS
   34     | lvalue . OP_MINUS_MINUS
   36 assignexpr: lvalue . OP_EQUALS expr
   37 primary: lvalue .
   46 member: lvalue . DOT IDENTIFIER
   47       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: lvalue . callsuffix

    OP_EQUALS       shift, and go to state 85
    OP_PLUS_PLUS    shift, and go to state 86
    OP_MINUS_MINUS  shift, and go to state 87
    LEFT_BRACKET    shift, and go to state 88
    LEFT_PAR        shift, and go to state 89
    DOT             shift, and go to state 90
    DOT_DOT         shift, and go to state 91

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 33

   38 primary: call .
   48 member: call . DOT IDENTIFIER
   49       | call . LEFT_BRACKET expr RIGHT_BRACKET
   50 call: call . LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 95
    LEFT_PAR      shift, and go to state 96
    DOT           shift, and go to state 97

    $default  reduce using rule 38 (primary)


State 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   87 ifstmt: IF LEFT_PAR . expr RIGHT_PAR stmt
   88       | IF LEFT_PAR . expr RIGHT_PAR stmt ELSE stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 98
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 43

   90 whilestmt: WHILE LEFT_PAR . expr RIGHT_PAR $@6 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 99
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 44

   92 forstmt: FOR LEFT_PAR . elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@7 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 100
    objectdef   go to state 34
    const       go to state 37


State 45

   77 funcdef: FUNCTION IDENTIFIER . $@4 LEFT_PAR $@5 idlist RIGHT_PAR block

    $default  reduce using rule 75 ($@4)

    $@4  go to state 101


State 46

   74 funcdef: FUNCTION LEFT_PAR . $@3 idlist RIGHT_PAR block

    $default  reduce using rule 73 ($@3)

    $@3  go to state 102


State 47

   93 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 93 (returnstmt)


State 48

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   94 returnstmt: RETURN expr . SEMICOLON

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    SEMICOLON      shift, and go to state 103


State 49

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 50

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 51

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 52

   43 lvalue: LOCAL IDENTIFIER .

    $default  reduce using rule 43 (lvalue)


State 53

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: OP_MINUS expr .

    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    $default  reduce using rule 29 (term)


State 54

   52 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    FUNCTION  shift, and go to state 8

    funcdef  go to state 104


State 55

   31 term: OP_PLUS_PLUS lvalue .
   46 member: lvalue . DOT IDENTIFIER
   47       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 88
    LEFT_PAR      shift, and go to state 89
    DOT           shift, and go to state 90
    DOT_DOT       shift, and go to state 91

    $default  reduce using rule 31 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 56

   48 member: call . DOT IDENTIFIER
   49       | call . LEFT_BRACKET expr RIGHT_BRACKET
   50 call: call . LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 95
    LEFT_PAR      shift, and go to state 96
    DOT           shift, and go to state 97


State 57

   33 term: OP_MINUS_MINUS lvalue .
   46 member: lvalue . DOT IDENTIFIER
   47       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 88
    LEFT_PAR      shift, and go to state 89
    DOT           shift, and go to state 90
    DOT_DOT       shift, and go to state 91

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 58

   70 block: LEFT_BRACE $@1 . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 105


State 59

   72 block: LEFT_BRACE $@2 . func_stmt RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 106
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    func_stmt   go to state 107
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 60

   66 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 108
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 61

   62 objectdef: LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 62 (objectdef)


State 62

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   57 elist: expr .
   58      | expr . COMMA elist

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    COMMA          shift, and go to state 109

    $default  reduce using rule 57 (elist)


State 63

   60 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 110


State 64

   61 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 111


State 65

   63 indexed: indexedelem .
   64        | indexedelem . COMMA indexed

    COMMA  shift, and go to state 112

    $default  reduce using rule 63 (indexed)


State 66

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   28 term: LEFT_PAR expr . RIGHT_PAR

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_PAR      shift, and go to state 113


State 67

   40 primary: LEFT_PAR funcdef . RIGHT_PAR
   52 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 114


State 68

   44 lvalue: COL_COL IDENTIFIER .

    $default  reduce using rule 44 (lvalue)


State 69

    0 $accept: program $end .

    $default  accept


State 70

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 71

   25 expr: expr AND . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 72

   26 expr: expr OR . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 73

   14 expr: expr OP_PLUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 74

   15 expr: expr OP_MINUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 75

   16 expr: expr OP_ASTERISK . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 76

   17 expr: expr OP_SLASH . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 77

   18 expr: expr OP_PERCENTAGE . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 78

   23 expr: expr OP_EQ_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 79

   24 expr: expr OP_NOT_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 80

   19 expr: expr OP_GREATER . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 81

   21 expr: expr OP_LESSER . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 82

   20 expr: expr OP_GREATER_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 83

   22 expr: expr OP_LESSER_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 84

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 85

   36 assignexpr: lvalue OP_EQUALS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 128
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 86

   32 term: lvalue OP_PLUS_PLUS .

    $default  reduce using rule 32 (term)


State 87

   34 term: lvalue OP_MINUS_MINUS .

    $default  reduce using rule 34 (term)


State 88

   47 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 129
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 89

   55 normcall: LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 130
    objectdef   go to state 34
    const       go to state 37


State 90

   46 member: lvalue DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 131


State 91

   56 methodcall: DOT_DOT . IDENTIFIER LEFT_PAR elist RIGHT_PAR

    IDENTIFIER  shift, and go to state 132


State 92

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


State 93

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


State 94

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


State 95

   49 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 96

   50 call: call LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 134
    objectdef   go to state 34
    const       go to state 37


State 97

   48 member: call DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 135


State 98

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   87 ifstmt: IF LEFT_PAR expr . RIGHT_PAR stmt
   88       | IF LEFT_PAR expr . RIGHT_PAR stmt ELSE stmt

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_PAR      shift, and go to state 136


State 99

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   90 whilestmt: WHILE LEFT_PAR expr . RIGHT_PAR $@6 stmt

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_PAR      shift, and go to state 137


State 100

   92 forstmt: FOR LEFT_PAR elist . SEMICOLON expr SEMICOLON elist RIGHT_PAR $@7 stmt

    SEMICOLON  shift, and go to state 138


State 101

   77 funcdef: FUNCTION IDENTIFIER $@4 . LEFT_PAR $@5 idlist RIGHT_PAR block

    LEFT_PAR  shift, and go to state 139


State 102

   74 funcdef: FUNCTION LEFT_PAR $@3 . idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 140

    $default  reduce using rule 86 (idlist)

    idlist  go to state 141


State 103

   94 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 94 (returnstmt)


State 104

   52 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 142


State 105

   70 block: LEFT_BRACE $@1 RIGHT_BRACE .

    $default  reduce using rule 70 (block)


State 106

   67 func_stmt: stmt . func_stmt
   68          | stmt .

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 68 (func_stmt)

    stmt        go to state 106
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    func_stmt   go to state 143
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 107

   72 block: LEFT_BRACE $@2 func_stmt . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 144


State 108

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   66 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    COLON          shift, and go to state 145


State 109

   58 elist: expr COMMA . elist

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 146
    objectdef   go to state 34
    const       go to state 37


State 110

   60 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 60 (objectdef)


State 111

   61 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 61 (objectdef)


State 112

   64 indexed: indexedelem COMMA . indexed

    LEFT_BRACE  shift, and go to state 60

    $default  reduce using rule 65 (indexed)

    indexed      go to state 147
    indexedelem  go to state 65


State 113

   28 term: LEFT_PAR expr RIGHT_PAR .

    $default  reduce using rule 28 (term)


State 114

   40 primary: LEFT_PAR funcdef RIGHT_PAR .
   52 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 148

    $default  reduce using rule 40 (primary)


State 115

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    $default  reduce using rule 25 (expr)


State 116

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    AND            shift, and go to state 71
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    $default  reduce using rule 26 (expr)


State 117

   14 expr: expr . OP_PLUS expr
   14     | expr OP_PLUS expr .
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    $default  reduce using rule 14 (expr)


State 118

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   15     | expr OP_MINUS expr .
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    $default  reduce using rule 15 (expr)


State 119

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   16     | expr OP_ASTERISK expr .
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


State 120

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   17     | expr OP_SLASH expr .
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 121

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   18     | expr OP_PERCENTAGE expr .
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 122

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   23     | expr OP_EQ_EQ expr .
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    OP_EQ_EQ   error (nonassociative)
    OP_NOT_EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 123

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   24     | expr OP_NOT_EQ expr .
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    OP_EQ_EQ   error (nonassociative)
    OP_NOT_EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 124

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   19     | expr OP_GREATER expr .
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 19 (expr)


State 125

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   21     | expr OP_LESSER expr .
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 21 (expr)


State 126

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   20     | expr OP_GREATER_EQ expr .
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 20 (expr)


State 127

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   22     | expr OP_LESSER_EQ expr .
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 22 (expr)


State 128

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue OP_EQUALS expr .

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    $default  reduce using rule 36 (assignexpr)


State 129

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   47 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 149


State 130

   55 normcall: LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 150


State 131

   46 member: lvalue DOT IDENTIFIER .

    $default  reduce using rule 46 (member)


State 132

   56 methodcall: DOT_DOT IDENTIFIER . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 151


State 133

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   49 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 152


State 134

   50 call: call LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 153


State 135

   48 member: call DOT IDENTIFIER .

    $default  reduce using rule 48 (member)


State 136

   87 ifstmt: IF LEFT_PAR expr RIGHT_PAR . stmt
   88       | IF LEFT_PAR expr RIGHT_PAR . stmt ELSE stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 154
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 137

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR . $@6 stmt

    $default  reduce using rule 89 ($@6)

    $@6  go to state 155


State 138

   92 forstmt: FOR LEFT_PAR elist SEMICOLON . expr SEMICOLON elist RIGHT_PAR $@7 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 156
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 139

   77 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR . $@5 idlist RIGHT_PAR block

    $default  reduce using rule 76 ($@5)

    $@5  go to state 157


State 140

   84 idlist: IDENTIFIER .
   85       | IDENTIFIER . COMMA idlist

    COMMA  shift, and go to state 158

    $default  reduce using rule 84 (idlist)


State 141

   74 funcdef: FUNCTION LEFT_PAR $@3 idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 159


State 142

   52 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 148


State 143

   67 func_stmt: stmt func_stmt .

    $default  reduce using rule 67 (func_stmt)


State 144

   72 block: LEFT_BRACE $@2 func_stmt RIGHT_BRACE .

    $default  reduce using rule 72 (block)


State 145

   66 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 160
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 146

   58 elist: expr COMMA elist .

    $default  reduce using rule 58 (elist)


State 147

   64 indexed: indexedelem COMMA indexed .

    $default  reduce using rule 64 (indexed)


State 148

   52 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 161
    objectdef   go to state 34
    const       go to state 37


State 149

   47 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 47 (member)


State 150

   55 normcall: LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 55 (normcall)


State 151

   56 methodcall: DOT_DOT IDENTIFIER LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 162
    objectdef   go to state 34
    const       go to state 37


State 152

   49 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 49 (member)


State 153

   50 call: call LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 50 (call)


State 154

   87 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt .
   88       | IF LEFT_PAR expr RIGHT_PAR stmt . ELSE stmt

    ELSE  shift, and go to state 163

    ELSE      [reduce using rule 87 (ifstmt)]
    $default  reduce using rule 87 (ifstmt)


State 155

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR $@6 . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 164
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 156

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr . SEMICOLON elist RIGHT_PAR $@7 stmt

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    SEMICOLON      shift, and go to state 165


State 157

   77 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 . idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 140

    $default  reduce using rule 86 (idlist)

    idlist  go to state 166


State 158

   85 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 140

    $default  reduce using rule 86 (idlist)

    idlist  go to state 167


State 159

   74 funcdef: FUNCTION LEFT_PAR $@3 idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 20

    block  go to state 168


State 160

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   66 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_BRACE    shift, and go to state 169


State 161

   52 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 170


State 162

   56 methodcall: DOT_DOT IDENTIFIER LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 171


State 163

   88 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 172
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 164

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR $@6 stmt .

    $default  reduce using rule 90 (whilestmt)


State 165

   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON . elist RIGHT_PAR $@7 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 173
    objectdef   go to state 34
    const       go to state 37


State 166

   77 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 174


State 167

   85 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 85 (idlist)


State 168

   74 funcdef: FUNCTION LEFT_PAR $@3 idlist RIGHT_PAR block .

    $default  reduce using rule 74 (funcdef)


State 169

   66 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 66 (indexedelem)


State 170

   52 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 52 (call)


State 171

   56 methodcall: DOT_DOT IDENTIFIER LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 56 (methodcall)


State 172

   88 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt .

    $default  reduce using rule 88 (ifstmt)


State 173

   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist . RIGHT_PAR $@7 stmt

    RIGHT_PAR  shift, and go to state 175


State 174

   77 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 20

    block  go to state 176


State 175

   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR . $@7 stmt

    $default  reduce using rule 91 ($@7)

    $@7  go to state 177


State 176

   77 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR block .

    $default  reduce using rule 77 (funcdef)


State 177

   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@7 . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 178
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 178

   92 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@7 stmt .

    $default  reduce using rule 92 (forstmt)
