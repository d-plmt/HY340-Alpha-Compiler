Terminals unused in grammar

    UMINUS


State 21 conflicts: 1 shift/reduce, 1 reduce/reduce
State 116 conflicts: 13 shift/reduce
State 143 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | expr op expr
   15     | term

   16 op: OP_PLUS
   17   | OP_MINUS
   18   | OP_ASTERISK
   19   | OP_SLASH
   20   | OP_PERCENTAGE
   21   | OP_GREATER
   22   | OP_GREATER_EQ
   23   | OP_LESSER
   24   | OP_LESSER_EQ
   25   | OP_EQ_EQ
   26   | OP_NOT_EQ
   27   | AND
   28   | OR

   29 term: LEFT_PAR expr RIGHT_PAR
   30     | OP_MINUS expr
   31     | NOT expr
   32     | OP_PLUS_PLUS lvalue
   33     | lvalue OP_PLUS_PLUS
   34     | OP_MINUS_MINUS lvalue
   35     | lvalue OP_MINUS_MINUS
   36     | primary

   37 assignexpr: lvalue OP_EQUALS expr

   38 primary: lvalue
   39        | call
   40        | objectdef
   41        | LEFT_PAR funcdef RIGHT_PAR
   42        | const

   43 lvalue: IDENTIFIER
   44       | LOCAL IDENTIFIER
   45       | COL_COL IDENTIFIER
   46       | member

   47 member: lvalue DOT IDENTIFIER
   48       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   49       | call DOT IDENTIFIER
   50       | call LEFT_BRACKET expr RIGHT_BRACKET

   51 call: call LEFT_PAR elist RIGHT_PAR
   52     | lvalue callsuffix
   53     | LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

   54 callsuffix: normcall
   55           | methodcall

   56 normcall: LEFT_PAR elist RIGHT_PAR

   57 methodcall: DOT_DOT IDENTIFIER LEFT_PAR elist RIGHT_PAR

   58 elist: expr
   59      | expr COMMA elist
   60      | %empty

   61 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   62          | LEFT_BRACKET indexed RIGHT_BRACKET
   63          | LEFT_BRACKET RIGHT_BRACKET

   64 indexed: indexedelem
   65        | indexedelem COMMA indexed
   66        | %empty

   67 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   68 func_stmt: stmt func_stmt
   69          | stmt

   70 $@1: %empty

   71 block: LEFT_BRACE $@1 RIGHT_BRACE

   72 $@2: %empty

   73 block: LEFT_BRACE $@2 func_stmt RIGHT_BRACE

   74 $@3: %empty

   75 funcdef: FUNCTION LEFT_PAR $@3 idlist RIGHT_PAR block

   76 $@4: %empty

   77 $@5: %empty

   78 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR block

   79 const: INTEGER
   80      | REAL
   81      | STRING
   82      | NIL
   83      | TRUE
   84      | FALSE

   85 idlist: IDENTIFIER
   86       | IDENTIFIER COMMA idlist
   87       | %empty

   88 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt
   89       | IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR stmt

   91 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

   92 returnstmt: RETURN SEMICOLON
   93           | RETURN expr SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <intVal> (258) 79
    REAL <realVal> (259) 80
    STRING <strVal> (260) 81
    IDENTIFIER <strVal> (261) 43 44 45 47 49 57 78 85 86
    IF <strVal> (262) 88 89
    ELSE <strVal> (263) 89
    WHILE <strVal> (264) 90
    FOR <strVal> (265) 91
    FUNCTION <strVal> (266) 75 78
    RETURN <strVal> (267) 92 93
    BREAK <strVal> (268) 8
    CONTINUE <strVal> (269) 9
    AND <strVal> (270) 27
    NOT <strVal> (271) 31
    OR <strVal> (272) 28
    LOCAL <strVal> (273) 44
    TRUE <strVal> (274) 83
    FALSE <strVal> (275) 84
    NIL <strVal> (276) 82
    OP_EQUALS <strVal> (277) 37
    OP_PLUS <strVal> (278) 16
    OP_MINUS <strVal> (279) 17 30
    OP_ASTERISK <strVal> (280) 18
    OP_SLASH <strVal> (281) 19
    OP_PERCENTAGE <strVal> (282) 20
    OP_EQ_EQ <strVal> (283) 25
    OP_NOT_EQ <strVal> (284) 26
    OP_PLUS_PLUS <strVal> (285) 32 33
    OP_MINUS_MINUS <strVal> (286) 34 35
    OP_GREATER <strVal> (287) 21
    OP_LESSER <strVal> (288) 23
    OP_GREATER_EQ <strVal> (289) 22
    OP_LESSER_EQ <strVal> (290) 24
    LEFT_BRACE <strVal> (291) 67 71 73
    RIGHT_BRACE <strVal> (292) 67 71 73
    LEFT_BRACKET <strVal> (293) 48 50 61 62 63
    RIGHT_BRACKET <strVal> (294) 48 50 61 62 63
    LEFT_PAR <strVal> (295) 29 41 51 53 56 57 75 78 88 89 90 91
    RIGHT_PAR <strVal> (296) 29 41 51 53 56 57 75 78 88 89 90 91
    SEMICOLON <strVal> (297) 3 8 9 12 91 92 93
    COMMA <strVal> (298) 59 65 86
    COLON <strVal> (299) 67
    COL_COL <strVal> (300) 45
    DOT <strVal> (301) 47 49
    DOT_DOT <strVal> (302) 57
    UMINUS (303)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 68 69 88 89 90 91
    expr (52)
        on left: 13 14 15
        on right: 3 14 29 30 31 37 48 50 58 59 67 88 89 90 91 93
    op (53)
        on left: 16 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 14
    term (54)
        on left: 29 30 31 32 33 34 35 36
        on right: 15
    assignexpr (55)
        on left: 37
        on right: 13
    primary (56)
        on left: 38 39 40 41 42
        on right: 36
    lvalue (57)
        on left: 43 44 45 46
        on right: 32 33 34 35 37 38 47 48 52
    member (58)
        on left: 47 48 49 50
        on right: 46
    call (59)
        on left: 51 52 53
        on right: 39 49 50 51
    callsuffix (60)
        on left: 54 55
        on right: 52
    normcall (61)
        on left: 56
        on right: 54
    methodcall (62)
        on left: 57
        on right: 55
    elist (63)
        on left: 58 59 60
        on right: 51 53 56 57 59 61 91
    objectdef (64)
        on left: 61 62 63
        on right: 40
    indexed (65)
        on left: 64 65 66
        on right: 62 65
    indexedelem (66)
        on left: 67
        on right: 64 65
    func_stmt (67)
        on left: 68 69
        on right: 68 73
    block (68)
        on left: 71 73
        on right: 10 75 78
    $@1 (69)
        on left: 70
        on right: 71
    $@2 (70)
        on left: 72
        on right: 73
    funcdef (71)
        on left: 75 78
        on right: 11 41 53
    $@3 (72)
        on left: 74
        on right: 75
    $@4 (73)
        on left: 76
        on right: 78
    $@5 (74)
        on left: 77
        on right: 78
    const (75)
        on left: 79 80 81 82 83 84
        on right: 42
    idlist (76)
        on left: 85 86 87
        on right: 75 78 86
    ifstmt (77)
        on left: 88 89
        on right: 4
    whilestmt (78)
        on left: 90
        on right: 5
    forstmt (79)
        on left: 91
        on right: 6
    returnstmt (80)
        on left: 92 93
        on right: 7


State 0

    0 $accept: . program $end

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   79 const: INTEGER .

    $default  reduce using rule 79 (const)


State 2

   80 const: REAL .

    $default  reduce using rule 80 (const)


State 3

   81 const: STRING .

    $default  reduce using rule 81 (const)


State 4

   43 lvalue: IDENTIFIER .

    $default  reduce using rule 43 (lvalue)


State 5

   88 ifstmt: IF . LEFT_PAR expr RIGHT_PAR stmt
   89       | IF . LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

    LEFT_PAR  shift, and go to state 42


State 6

   90 whilestmt: WHILE . LEFT_PAR expr RIGHT_PAR stmt

    LEFT_PAR  shift, and go to state 43


State 7

   91 forstmt: FOR . LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

    LEFT_PAR  shift, and go to state 44


State 8

   75 funcdef: FUNCTION . LEFT_PAR $@3 idlist RIGHT_PAR block
   78        | FUNCTION . IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 45
    LEFT_PAR    shift, and go to state 46


State 9

   92 returnstmt: RETURN . SEMICOLON
   93           | RETURN . expr SEMICOLON

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 47
    COL_COL         shift, and go to state 24

    expr        go to state 48
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 49


State 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 12

   31 term: NOT . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 13

   44 lvalue: LOCAL . IDENTIFIER

    IDENTIFIER  shift, and go to state 52


State 14

   83 const: TRUE .

    $default  reduce using rule 83 (const)


State 15

   84 const: FALSE .

    $default  reduce using rule 84 (const)


State 16

   82 const: NIL .

    $default  reduce using rule 82 (const)


State 17

   30 term: OP_MINUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 18

   32 term: OP_PLUS_PLUS . lvalue

    IDENTIFIER  shift, and go to state 4
    LOCAL       shift, and go to state 13
    LEFT_PAR    shift, and go to state 54
    COL_COL     shift, and go to state 24

    lvalue  go to state 55
    member  go to state 32
    call    go to state 56


State 19

   34 term: OP_MINUS_MINUS . lvalue

    IDENTIFIER  shift, and go to state 4
    LOCAL       shift, and go to state 13
    LEFT_PAR    shift, and go to state 54
    COL_COL     shift, and go to state 24

    lvalue  go to state 57
    member  go to state 32
    call    go to state 56


State 20

   71 block: LEFT_BRACE . $@1 RIGHT_BRACE
   73      | LEFT_BRACE . $@2 func_stmt RIGHT_BRACE

    RIGHT_BRACE  reduce using rule 70 ($@1)
    $default     reduce using rule 72 ($@2)

    $@1  go to state 58
    $@2  go to state 59


State 21

   61 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   62          | LEFT_BRACKET . indexed RIGHT_BRACKET
   63          | LEFT_BRACKET . RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 60
    LEFT_BRACKET    shift, and go to state 21
    RIGHT_BRACKET   shift, and go to state 61
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    RIGHT_BRACKET  [reduce using rule 60 (elist)]
    RIGHT_BRACKET  [reduce using rule 66 (indexed)]

    expr         go to state 62
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 63
    objectdef    go to state 34
    indexed      go to state 64
    indexedelem  go to state 65
    const        go to state 37


State 22

   29 term: LEFT_PAR . expr RIGHT_PAR
   41 primary: LEFT_PAR . funcdef RIGHT_PAR
   53 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 8
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 66
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 67
    const       go to state 37


State 23

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 24

   45 lvalue: COL_COL . IDENTIFIER

    IDENTIFIER  shift, and go to state 68


State 25

    0 $accept: program . $end

    $end  shift, and go to state 69


State 26

    1 program: stmt . program

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 70
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON
   14 expr: expr . op expr

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    SEMICOLON      shift, and go to state 84

    op  go to state 85


State 28

   15 expr: term .

    $default  reduce using rule 15 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   36 term: primary .

    $default  reduce using rule 36 (term)


State 31

   33 term: lvalue . OP_PLUS_PLUS
   35     | lvalue . OP_MINUS_MINUS
   37 assignexpr: lvalue . OP_EQUALS expr
   38 primary: lvalue .
   47 member: lvalue . DOT IDENTIFIER
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    OP_EQUALS       shift, and go to state 86
    OP_PLUS_PLUS    shift, and go to state 87
    OP_MINUS_MINUS  shift, and go to state 88
    LEFT_BRACKET    shift, and go to state 89
    LEFT_PAR        shift, and go to state 90
    DOT             shift, and go to state 91
    DOT_DOT         shift, and go to state 92

    $default  reduce using rule 38 (primary)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 32

   46 lvalue: member .

    $default  reduce using rule 46 (lvalue)


State 33

   39 primary: call .
   49 member: call . DOT IDENTIFIER
   50       | call . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: call . LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 96
    LEFT_PAR      shift, and go to state 97
    DOT           shift, and go to state 98

    $default  reduce using rule 39 (primary)


State 34

   40 primary: objectdef .

    $default  reduce using rule 40 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   42 primary: const .

    $default  reduce using rule 42 (primary)


State 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   88 ifstmt: IF LEFT_PAR . expr RIGHT_PAR stmt
   89       | IF LEFT_PAR . expr RIGHT_PAR stmt ELSE stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 99
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 43

   90 whilestmt: WHILE LEFT_PAR . expr RIGHT_PAR stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 100
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 44

   91 forstmt: FOR LEFT_PAR . elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 101
    objectdef   go to state 34
    const       go to state 37


State 45

   78 funcdef: FUNCTION IDENTIFIER . $@4 LEFT_PAR $@5 idlist RIGHT_PAR block

    $default  reduce using rule 76 ($@4)

    $@4  go to state 102


State 46

   75 funcdef: FUNCTION LEFT_PAR . $@3 idlist RIGHT_PAR block

    $default  reduce using rule 74 ($@3)

    $@3  go to state 103


State 47

   92 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 92 (returnstmt)


State 48

   14 expr: expr . op expr
   93 returnstmt: RETURN expr . SEMICOLON

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    SEMICOLON      shift, and go to state 104

    op  go to state 85


State 49

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 50

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 51

   14 expr: expr . op expr
   31 term: NOT expr .

    $default  reduce using rule 31 (term)

    op  go to state 85


State 52

   44 lvalue: LOCAL IDENTIFIER .

    $default  reduce using rule 44 (lvalue)


State 53

   14 expr: expr . op expr
   30 term: OP_MINUS expr .

    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77

    $default  reduce using rule 30 (term)

    op  go to state 85


State 54

   53 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    FUNCTION  shift, and go to state 8

    funcdef  go to state 105


State 55

   32 term: OP_PLUS_PLUS lvalue .
   47 member: lvalue . DOT IDENTIFIER
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 89
    LEFT_PAR      shift, and go to state 90
    DOT           shift, and go to state 91
    DOT_DOT       shift, and go to state 92

    $default  reduce using rule 32 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 56

   49 member: call . DOT IDENTIFIER
   50       | call . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: call . LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 96
    LEFT_PAR      shift, and go to state 97
    DOT           shift, and go to state 98


State 57

   34 term: OP_MINUS_MINUS lvalue .
   47 member: lvalue . DOT IDENTIFIER
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 89
    LEFT_PAR      shift, and go to state 90
    DOT           shift, and go to state 91
    DOT_DOT       shift, and go to state 92

    $default  reduce using rule 34 (term)

    callsuffix  go to state 93
    normcall    go to state 94
    methodcall  go to state 95


State 58

   71 block: LEFT_BRACE $@1 . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 106


State 59

   73 block: LEFT_BRACE $@2 . func_stmt RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 107
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    func_stmt   go to state 108
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 60

   67 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 109
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 61

   63 objectdef: LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 63 (objectdef)


State 62

   14 expr: expr . op expr
   58 elist: expr .
   59      | expr . COMMA elist

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    COMMA          shift, and go to state 110

    $default  reduce using rule 58 (elist)

    op  go to state 85


State 63

   61 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 111


State 64

   62 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 112


State 65

   64 indexed: indexedelem .
   65        | indexedelem . COMMA indexed

    COMMA  shift, and go to state 113

    $default  reduce using rule 64 (indexed)


State 66

   14 expr: expr . op expr
   29 term: LEFT_PAR expr . RIGHT_PAR

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_PAR      shift, and go to state 114

    op  go to state 85


State 67

   41 primary: LEFT_PAR funcdef . RIGHT_PAR
   53 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 115


State 68

   45 lvalue: COL_COL IDENTIFIER .

    $default  reduce using rule 45 (lvalue)


State 69

    0 $accept: program $end .

    $default  accept


State 70

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 71

   27 op: AND .

    $default  reduce using rule 27 (op)


State 72

   28 op: OR .

    $default  reduce using rule 28 (op)


State 73

   16 op: OP_PLUS .

    $default  reduce using rule 16 (op)


State 74

   17 op: OP_MINUS .

    $default  reduce using rule 17 (op)


State 75

   18 op: OP_ASTERISK .

    $default  reduce using rule 18 (op)


State 76

   19 op: OP_SLASH .

    $default  reduce using rule 19 (op)


State 77

   20 op: OP_PERCENTAGE .

    $default  reduce using rule 20 (op)


State 78

   25 op: OP_EQ_EQ .

    $default  reduce using rule 25 (op)


State 79

   26 op: OP_NOT_EQ .

    $default  reduce using rule 26 (op)


State 80

   21 op: OP_GREATER .

    $default  reduce using rule 21 (op)


State 81

   23 op: OP_LESSER .

    $default  reduce using rule 23 (op)


State 82

   22 op: OP_GREATER_EQ .

    $default  reduce using rule 22 (op)


State 83

   24 op: OP_LESSER_EQ .

    $default  reduce using rule 24 (op)


State 84

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 85

   14 expr: expr op . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 86

   37 assignexpr: lvalue OP_EQUALS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 87

   33 term: lvalue OP_PLUS_PLUS .

    $default  reduce using rule 33 (term)


State 88

   35 term: lvalue OP_MINUS_MINUS .

    $default  reduce using rule 35 (term)


State 89

   48 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 90

   56 normcall: LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 119
    objectdef   go to state 34
    const       go to state 37


State 91

   47 member: lvalue DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 120


State 92

   57 methodcall: DOT_DOT . IDENTIFIER LEFT_PAR elist RIGHT_PAR

    IDENTIFIER  shift, and go to state 121


State 93

   52 call: lvalue callsuffix .

    $default  reduce using rule 52 (call)


State 94

   54 callsuffix: normcall .

    $default  reduce using rule 54 (callsuffix)


State 95

   55 callsuffix: methodcall .

    $default  reduce using rule 55 (callsuffix)


State 96

   50 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 97

   51 call: call LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 123
    objectdef   go to state 34
    const       go to state 37


State 98

   49 member: call DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 124


State 99

   14 expr: expr . op expr
   88 ifstmt: IF LEFT_PAR expr . RIGHT_PAR stmt
   89       | IF LEFT_PAR expr . RIGHT_PAR stmt ELSE stmt

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_PAR      shift, and go to state 125

    op  go to state 85


State 100

   14 expr: expr . op expr
   90 whilestmt: WHILE LEFT_PAR expr . RIGHT_PAR stmt

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_PAR      shift, and go to state 126

    op  go to state 85


State 101

   91 forstmt: FOR LEFT_PAR elist . SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt

    SEMICOLON  shift, and go to state 127


State 102

   78 funcdef: FUNCTION IDENTIFIER $@4 . LEFT_PAR $@5 idlist RIGHT_PAR block

    LEFT_PAR  shift, and go to state 128


State 103

   75 funcdef: FUNCTION LEFT_PAR $@3 . idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 129

    $default  reduce using rule 87 (idlist)

    idlist  go to state 130


State 104

   93 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 93 (returnstmt)


State 105

   53 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 131


State 106

   71 block: LEFT_BRACE $@1 RIGHT_BRACE .

    $default  reduce using rule 71 (block)


State 107

   68 func_stmt: stmt . func_stmt
   69          | stmt .

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 69 (func_stmt)

    stmt        go to state 107
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    func_stmt   go to state 132
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 108

   73 block: LEFT_BRACE $@2 func_stmt . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 133


State 109

   14 expr: expr . op expr
   67 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    COLON          shift, and go to state 134

    op  go to state 85


State 110

   59 elist: expr COMMA . elist

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 135
    objectdef   go to state 34
    const       go to state 37


State 111

   61 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 61 (objectdef)


State 112

   62 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 62 (objectdef)


State 113

   65 indexed: indexedelem COMMA . indexed

    LEFT_BRACE  shift, and go to state 60

    $default  reduce using rule 66 (indexed)

    indexed      go to state 136
    indexedelem  go to state 65


State 114

   29 term: LEFT_PAR expr RIGHT_PAR .

    $default  reduce using rule 29 (term)


State 115

   41 primary: LEFT_PAR funcdef RIGHT_PAR .
   53 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 137

    $default  reduce using rule 41 (primary)


State 116

   14 expr: expr . op expr
   14     | expr op expr .

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    AND            [reduce using rule 14 (expr)]
    OR             [reduce using rule 14 (expr)]
    OP_PLUS        [reduce using rule 14 (expr)]
    OP_MINUS       [reduce using rule 14 (expr)]
    OP_ASTERISK    [reduce using rule 14 (expr)]
    OP_SLASH       [reduce using rule 14 (expr)]
    OP_PERCENTAGE  [reduce using rule 14 (expr)]
    OP_EQ_EQ       [reduce using rule 14 (expr)]
    OP_NOT_EQ      [reduce using rule 14 (expr)]
    OP_GREATER     [reduce using rule 14 (expr)]
    OP_LESSER      [reduce using rule 14 (expr)]
    OP_GREATER_EQ  [reduce using rule 14 (expr)]
    OP_LESSER_EQ   [reduce using rule 14 (expr)]
    $default       reduce using rule 14 (expr)

    op  go to state 85


State 117

   14 expr: expr . op expr
   37 assignexpr: lvalue OP_EQUALS expr .

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83

    $default  reduce using rule 37 (assignexpr)

    op  go to state 85


State 118

   14 expr: expr . op expr
   48 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 138

    op  go to state 85


State 119

   56 normcall: LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 139


State 120

   47 member: lvalue DOT IDENTIFIER .

    $default  reduce using rule 47 (member)


State 121

   57 methodcall: DOT_DOT IDENTIFIER . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 140


State 122

   14 expr: expr . op expr
   50 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 141

    op  go to state 85


State 123

   51 call: call LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 142


State 124

   49 member: call DOT IDENTIFIER .

    $default  reduce using rule 49 (member)


State 125

   88 ifstmt: IF LEFT_PAR expr RIGHT_PAR . stmt
   89       | IF LEFT_PAR expr RIGHT_PAR . stmt ELSE stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 143
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 126

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 144
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 127

   91 forstmt: FOR LEFT_PAR elist SEMICOLON . expr SEMICOLON elist RIGHT_PAR stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 145
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 128

   78 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR . $@5 idlist RIGHT_PAR block

    $default  reduce using rule 77 ($@5)

    $@5  go to state 146


State 129

   85 idlist: IDENTIFIER .
   86       | IDENTIFIER . COMMA idlist

    COMMA  shift, and go to state 147

    $default  reduce using rule 85 (idlist)


State 130

   75 funcdef: FUNCTION LEFT_PAR $@3 idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 148


State 131

   53 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 137


State 132

   68 func_stmt: stmt func_stmt .

    $default  reduce using rule 68 (func_stmt)


State 133

   73 block: LEFT_BRACE $@2 func_stmt RIGHT_BRACE .

    $default  reduce using rule 73 (block)


State 134

   67 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 149
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 135

   59 elist: expr COMMA elist .

    $default  reduce using rule 59 (elist)


State 136

   65 indexed: indexedelem COMMA indexed .

    $default  reduce using rule 65 (indexed)


State 137

   53 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 150
    objectdef   go to state 34
    const       go to state 37


State 138

   48 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 48 (member)


State 139

   56 normcall: LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 56 (normcall)


State 140

   57 methodcall: DOT_DOT IDENTIFIER LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 151
    objectdef   go to state 34
    const       go to state 37


State 141

   50 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 50 (member)


State 142

   51 call: call LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 51 (call)


State 143

   88 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt .
   89       | IF LEFT_PAR expr RIGHT_PAR stmt . ELSE stmt

    ELSE  shift, and go to state 152

    ELSE      [reduce using rule 88 (ifstmt)]
    $default  reduce using rule 88 (ifstmt)


State 144

   90 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR stmt .

    $default  reduce using rule 90 (whilestmt)


State 145

   14 expr: expr . op expr
   91 forstmt: FOR LEFT_PAR elist SEMICOLON expr . SEMICOLON elist RIGHT_PAR stmt

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    SEMICOLON      shift, and go to state 153

    op  go to state 85


State 146

   78 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 . idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 129

    $default  reduce using rule 87 (idlist)

    idlist  go to state 154


State 147

   86 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 129

    $default  reduce using rule 87 (idlist)

    idlist  go to state 155


State 148

   75 funcdef: FUNCTION LEFT_PAR $@3 idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 20

    block  go to state 156


State 149

   14 expr: expr . op expr
   67 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    AND            shift, and go to state 71
    OR             shift, and go to state 72
    OP_PLUS        shift, and go to state 73
    OP_MINUS       shift, and go to state 74
    OP_ASTERISK    shift, and go to state 75
    OP_SLASH       shift, and go to state 76
    OP_PERCENTAGE  shift, and go to state 77
    OP_EQ_EQ       shift, and go to state 78
    OP_NOT_EQ      shift, and go to state 79
    OP_GREATER     shift, and go to state 80
    OP_LESSER      shift, and go to state 81
    OP_GREATER_EQ  shift, and go to state 82
    OP_LESSER_EQ   shift, and go to state 83
    RIGHT_BRACE    shift, and go to state 157

    op  go to state 85


State 150

   53 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 158


State 151

   57 methodcall: DOT_DOT IDENTIFIER LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 159


State 152

   89 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 160
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 153

   91 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON . elist RIGHT_PAR stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 60 (elist)

    expr        go to state 62
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 161
    objectdef   go to state 34
    const       go to state 37


State 154

   78 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 162


State 155

   86 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 86 (idlist)


State 156

   75 funcdef: FUNCTION LEFT_PAR $@3 idlist RIGHT_PAR block .

    $default  reduce using rule 75 (funcdef)


State 157

   67 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 67 (indexedelem)


State 158

   53 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 53 (call)


State 159

   57 methodcall: DOT_DOT IDENTIFIER LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 57 (methodcall)


State 160

   89 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt .

    $default  reduce using rule 89 (ifstmt)


State 161

   91 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist . RIGHT_PAR stmt

    RIGHT_PAR  shift, and go to state 163


State 162

   78 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 20

    block  go to state 164


State 163

   91 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 165
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 164

   78 funcdef: FUNCTION IDENTIFIER $@4 LEFT_PAR $@5 idlist RIGHT_PAR block .

    $default  reduce using rule 78 (funcdef)


State 165

   91 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR stmt .

    $default  reduce using rule 91 (forstmt)
