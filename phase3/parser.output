Terminals unused in grammar

    LINE_COMM


State 153 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | %empty

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | expr OP_PLUS expr
   15     | expr OP_MINUS expr
   16     | expr OP_ASTERISK expr
   17     | expr OP_SLASH expr
   18     | expr OP_PERCENTAGE expr
   19     | expr OP_GREATER expr
   20     | expr OP_GREATER_EQ expr
   21     | expr OP_LESSER expr
   22     | expr OP_LESSER_EQ expr
   23     | expr OP_EQ_EQ expr
   24     | expr OP_NOT_EQ expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: LEFT_PAR expr RIGHT_PAR
   29     | OP_MINUS expr
   30     | NOT expr
   31     | OP_PLUS_PLUS lvalue
   32     | lvalue OP_PLUS_PLUS
   33     | OP_MINUS_MINUS lvalue
   34     | lvalue OP_MINUS_MINUS
   35     | primary

   36 assignexpr: lvalue OP_EQUALS expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | LEFT_PAR funcdef RIGHT_PAR
   41        | const

   42 lvalue: IDENTIFIER
   43       | LOCAL IDENTIFIER
   44       | COL_COL IDENTIFIER
   45       | member

   46 member: lvalue DOT IDENTIFIER
   47       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   48       | call DOT IDENTIFIER
   49       | call LEFT_BRACKET expr RIGHT_BRACKET

   50 $@1: %empty

   51 call: call $@1 LEFT_PAR elist RIGHT_PAR
   52     | lvalue callsuffix

   53 $@2: %empty

   54 call: LEFT_PAR funcdef RIGHT_PAR $@2 LEFT_PAR elist RIGHT_PAR

   55 callsuffix: normcall
   56           | methodcall

   57 $@3: %empty

   58 normcall: LEFT_PAR $@3 elist RIGHT_PAR

   59 $@4: %empty

   60 methodcall: DOT_DOT IDENTIFIER LEFT_PAR $@4 elist RIGHT_PAR

   61 elist: expr
   62      | expr COMMA elist
   63      | %empty

   64 objectdef: LEFT_BRACKET elist RIGHT_BRACKET
   65          | LEFT_BRACKET indexed RIGHT_BRACKET

   66 indexed: indexedelem
   67        | indexedelem COMMA indexed

   68 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   69 func_stmt: stmt func_stmt
   70          | stmt

   71 $@5: %empty

   72 block: LEFT_BRACE $@5 RIGHT_BRACE

   73 $@6: %empty

   74 $@7: %empty

   75 block: LEFT_BRACE $@6 func_stmt RIGHT_BRACE $@7

   76 $@8: %empty

   77 funcdef: FUNCTION LEFT_PAR $@8 idlist RIGHT_PAR block

   78 $@9: %empty

   79 $@10: %empty

   80 funcdef: FUNCTION IDENTIFIER $@9 LEFT_PAR $@10 idlist RIGHT_PAR block

   81 const: INTEGER
   82      | REAL
   83      | STRING
   84      | NIL
   85      | TRUE
   86      | FALSE

   87 idlist: IDENTIFIER
   88       | IDENTIFIER COMMA idlist
   89       | %empty

   90 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt
   91       | IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

   92 $@11: %empty

   93 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR $@11 stmt

   94 $@12: %empty

   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@12 stmt

   96 returnstmt: RETURN SEMICOLON
   97           | RETURN expr SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <intVal> (258) 81
    REAL <realVal> (259) 82
    STRING <strVal> (260) 83
    IDENTIFIER <strVal> (261) 42 43 44 46 48 60 80 87 88
    IF <strVal> (262) 90 91
    ELSE <strVal> (263) 91
    WHILE <strVal> (264) 93
    FOR <strVal> (265) 95
    FUNCTION <strVal> (266) 77 80
    RETURN <strVal> (267) 96 97
    BREAK <strVal> (268) 8
    CONTINUE <strVal> (269) 9
    AND <strVal> (270) 25
    NOT <strVal> (271) 30
    OR <strVal> (272) 26
    LOCAL <strVal> (273) 43
    TRUE <strVal> (274) 85
    FALSE <strVal> (275) 86
    NIL <strVal> (276) 84
    OP_EQUALS <strVal> (277) 36
    OP_PLUS <strVal> (278) 14
    OP_MINUS <strVal> (279) 15 29
    OP_ASTERISK <strVal> (280) 16
    OP_SLASH <strVal> (281) 17
    OP_PERCENTAGE <strVal> (282) 18
    OP_EQ_EQ <strVal> (283) 23
    OP_NOT_EQ <strVal> (284) 24
    OP_PLUS_PLUS <strVal> (285) 31 32
    OP_MINUS_MINUS <strVal> (286) 33 34
    OP_GREATER <strVal> (287) 19
    OP_LESSER <strVal> (288) 21
    OP_GREATER_EQ <strVal> (289) 20
    OP_LESSER_EQ <strVal> (290) 22
    LEFT_BRACE <strVal> (291) 68 72 75
    RIGHT_BRACE <strVal> (292) 68 72 75
    LEFT_BRACKET <strVal> (293) 47 49 64 65
    RIGHT_BRACKET <strVal> (294) 47 49 64 65
    LEFT_PAR <strVal> (295) 28 40 51 54 58 60 77 80 90 91 93 95
    RIGHT_PAR <strVal> (296) 28 40 51 54 58 60 77 80 90 91 93 95
    SEMICOLON <strVal> (297) 3 8 9 12 95 96 97
    COMMA <strVal> (298) 62 67 88
    COLON <strVal> (299) 68
    COL_COL <strVal> (300) 44
    DOT <strVal> (301) 46 48
    DOT_DOT <strVal> (302) 60
    LINE_COMM <strVal> (303)


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1 2
        on right: 0 1
    stmt (51)
        on left: 3 4 5 6 7 8 9 10 11 12
        on right: 1 69 70 90 91 93 95
    expr (52)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 47 49 61 62 68 90 91 93 95 97
    term (53)
        on left: 28 29 30 31 32 33 34 35
        on right: 27
    assignexpr (54)
        on left: 36
        on right: 13
    primary (55)
        on left: 37 38 39 40 41
        on right: 35
    lvalue <strVal> (56)
        on left: 42 43 44 45
        on right: 31 32 33 34 36 37 46 47 52
    member (57)
        on left: 46 47 48 49
        on right: 45
    call (58)
        on left: 51 52 54
        on right: 38 48 49 51
    $@1 (59)
        on left: 50
        on right: 51
    $@2 (60)
        on left: 53
        on right: 54
    callsuffix (61)
        on left: 55 56
        on right: 52
    normcall (62)
        on left: 58
        on right: 55
    $@3 (63)
        on left: 57
        on right: 58
    methodcall (64)
        on left: 60
        on right: 56
    $@4 (65)
        on left: 59
        on right: 60
    elist (66)
        on left: 61 62 63
        on right: 51 54 58 60 62 64 95
    objectdef (67)
        on left: 64 65
        on right: 39
    indexed (68)
        on left: 66 67
        on right: 65 67
    indexedelem (69)
        on left: 68
        on right: 66 67
    func_stmt (70)
        on left: 69 70
        on right: 69 75
    block (71)
        on left: 72 75
        on right: 10 77 80
    $@5 (72)
        on left: 71
        on right: 72
    $@6 (73)
        on left: 73
        on right: 75
    $@7 (74)
        on left: 74
        on right: 75
    funcdef (75)
        on left: 77 80
        on right: 11 40 54
    $@8 (76)
        on left: 76
        on right: 77
    $@9 (77)
        on left: 78
        on right: 80
    $@10 (78)
        on left: 79
        on right: 80
    const (79)
        on left: 81 82 83 84 85 86
        on right: 41
    idlist (80)
        on left: 87 88 89
        on right: 77 80 88
    ifstmt (81)
        on left: 90 91
        on right: 4
    whilestmt (82)
        on left: 93
        on right: 5
    $@11 (83)
        on left: 92
        on right: 93
    forstmt (84)
        on left: 95
        on right: 6
    $@12 (85)
        on left: 94
        on right: 95
    returnstmt (86)
        on left: 96 97
        on right: 7


State 0

    0 $accept: . program $end

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   81 const: INTEGER .

    $default  reduce using rule 81 (const)


State 2

   82 const: REAL .

    $default  reduce using rule 82 (const)


State 3

   83 const: STRING .

    $default  reduce using rule 83 (const)


State 4

   42 lvalue: IDENTIFIER .

    $default  reduce using rule 42 (lvalue)


State 5

   90 ifstmt: IF . LEFT_PAR expr RIGHT_PAR stmt
   91       | IF . LEFT_PAR expr RIGHT_PAR stmt ELSE stmt

    LEFT_PAR  shift, and go to state 42


State 6

   93 whilestmt: WHILE . LEFT_PAR expr RIGHT_PAR $@11 stmt

    LEFT_PAR  shift, and go to state 43


State 7

   95 forstmt: FOR . LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@12 stmt

    LEFT_PAR  shift, and go to state 44


State 8

   77 funcdef: FUNCTION . LEFT_PAR $@8 idlist RIGHT_PAR block
   80        | FUNCTION . IDENTIFIER $@9 LEFT_PAR $@10 idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 45
    LEFT_PAR    shift, and go to state 46


State 9

   96 returnstmt: RETURN . SEMICOLON
   97           | RETURN . expr SEMICOLON

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 47
    COL_COL         shift, and go to state 24

    expr        go to state 48
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 49


State 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 12

   30 term: NOT . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 13

   43 lvalue: LOCAL . IDENTIFIER

    IDENTIFIER  shift, and go to state 52


State 14

   85 const: TRUE .

    $default  reduce using rule 85 (const)


State 15

   86 const: FALSE .

    $default  reduce using rule 86 (const)


State 16

   84 const: NIL .

    $default  reduce using rule 84 (const)


State 17

   29 term: OP_MINUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 53
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 18

   31 term: OP_PLUS_PLUS . lvalue

    IDENTIFIER  shift, and go to state 4
    LOCAL       shift, and go to state 13
    LEFT_PAR    shift, and go to state 54
    COL_COL     shift, and go to state 24

    lvalue  go to state 55
    member  go to state 32
    call    go to state 56


State 19

   33 term: OP_MINUS_MINUS . lvalue

    IDENTIFIER  shift, and go to state 4
    LOCAL       shift, and go to state 13
    LEFT_PAR    shift, and go to state 54
    COL_COL     shift, and go to state 24

    lvalue  go to state 57
    member  go to state 32
    call    go to state 56


State 20

   72 block: LEFT_BRACE . $@5 RIGHT_BRACE
   75      | LEFT_BRACE . $@6 func_stmt RIGHT_BRACE $@7

    RIGHT_BRACE  reduce using rule 71 ($@5)
    $default     reduce using rule 73 ($@6)

    $@5  go to state 58
    $@6  go to state 59


State 21

   64 objectdef: LEFT_BRACKET . elist RIGHT_BRACKET
   65          | LEFT_BRACKET . indexed RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 60
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr         go to state 61
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 62
    objectdef    go to state 34
    indexed      go to state 63
    indexedelem  go to state 64
    const        go to state 37


State 22

   28 term: LEFT_PAR . expr RIGHT_PAR
   40 primary: LEFT_PAR . funcdef RIGHT_PAR
   54 call: LEFT_PAR . funcdef RIGHT_PAR $@2 LEFT_PAR elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 8
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 65
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 66
    const       go to state 37


State 23

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 24

   44 lvalue: COL_COL . IDENTIFIER

    IDENTIFIER  shift, and go to state 67


State 25

    0 $accept: program . $end

    $end  shift, and go to state 68


State 26

    1 program: stmt . program

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 69
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON
   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    SEMICOLON      shift, and go to state 83


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . OP_PLUS_PLUS
   34     | lvalue . OP_MINUS_MINUS
   36 assignexpr: lvalue . OP_EQUALS expr
   37 primary: lvalue .
   46 member: lvalue . DOT IDENTIFIER
   47       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    OP_EQUALS       shift, and go to state 84
    OP_PLUS_PLUS    shift, and go to state 85
    OP_MINUS_MINUS  shift, and go to state 86
    LEFT_BRACKET    shift, and go to state 87
    LEFT_PAR        shift, and go to state 88
    DOT             shift, and go to state 89
    DOT_DOT         shift, and go to state 90

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


State 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 33

   38 primary: call .
   48 member: call . DOT IDENTIFIER
   49       | call . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: call . $@1 LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 94
    DOT           shift, and go to state 95

    LEFT_PAR  reduce using rule 50 ($@1)
    $default  reduce using rule 38 (primary)

    $@1  go to state 96


State 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   90 ifstmt: IF LEFT_PAR . expr RIGHT_PAR stmt
   91       | IF LEFT_PAR . expr RIGHT_PAR stmt ELSE stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 97
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 43

   93 whilestmt: WHILE LEFT_PAR . expr RIGHT_PAR $@11 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 98
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 44

   95 forstmt: FOR LEFT_PAR . elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@12 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 99
    objectdef   go to state 34
    const       go to state 37


State 45

   80 funcdef: FUNCTION IDENTIFIER . $@9 LEFT_PAR $@10 idlist RIGHT_PAR block

    $default  reduce using rule 78 ($@9)

    $@9  go to state 100


State 46

   77 funcdef: FUNCTION LEFT_PAR . $@8 idlist RIGHT_PAR block

    $default  reduce using rule 76 ($@8)

    $@8  go to state 101


State 47

   96 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 96 (returnstmt)


State 48

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   97 returnstmt: RETURN expr . SEMICOLON

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    SEMICOLON      shift, and go to state 102


State 49

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 50

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 51

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 52

   43 lvalue: LOCAL IDENTIFIER .

    $default  reduce using rule 43 (lvalue)


State 53

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: OP_MINUS expr .

    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    $default  reduce using rule 29 (term)


State 54

   54 call: LEFT_PAR . funcdef RIGHT_PAR $@2 LEFT_PAR elist RIGHT_PAR

    FUNCTION  shift, and go to state 8

    funcdef  go to state 103


State 55

   31 term: OP_PLUS_PLUS lvalue .
   46 member: lvalue . DOT IDENTIFIER
   47       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 87
    LEFT_PAR      shift, and go to state 88
    DOT           shift, and go to state 89
    DOT_DOT       shift, and go to state 90

    $default  reduce using rule 31 (term)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


State 56

   48 member: call . DOT IDENTIFIER
   49       | call . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: call . $@1 LEFT_PAR elist RIGHT_PAR

    LEFT_BRACKET  shift, and go to state 94
    DOT           shift, and go to state 95

    $default  reduce using rule 50 ($@1)

    $@1  go to state 96


State 57

   33 term: OP_MINUS_MINUS lvalue .
   46 member: lvalue . DOT IDENTIFIER
   47       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   52 call: lvalue . callsuffix

    LEFT_BRACKET  shift, and go to state 87
    LEFT_PAR      shift, and go to state 88
    DOT           shift, and go to state 89
    DOT_DOT       shift, and go to state 90

    $default  reduce using rule 33 (term)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


State 58

   72 block: LEFT_BRACE $@5 . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 104


State 59

   75 block: LEFT_BRACE $@6 . func_stmt RIGHT_BRACE $@7

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 105
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    func_stmt   go to state 106
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 60

   68 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 107
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 61

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   61 elist: expr .
   62      | expr . COMMA elist

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    COMMA          shift, and go to state 108

    $default  reduce using rule 61 (elist)


State 62

   64 objectdef: LEFT_BRACKET elist . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 109


State 63

   65 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 110


State 64

   66 indexed: indexedelem .
   67        | indexedelem . COMMA indexed

    COMMA  shift, and go to state 111

    $default  reduce using rule 66 (indexed)


State 65

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   28 term: LEFT_PAR expr . RIGHT_PAR

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    RIGHT_PAR      shift, and go to state 112


State 66

   40 primary: LEFT_PAR funcdef . RIGHT_PAR
   54 call: LEFT_PAR funcdef . RIGHT_PAR $@2 LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 113


State 67

   44 lvalue: COL_COL IDENTIFIER .

    $default  reduce using rule 44 (lvalue)


State 68

    0 $accept: program $end .

    $default  accept


State 69

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 70

   25 expr: expr AND . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 71

   26 expr: expr OR . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 72

   14 expr: expr OP_PLUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 73

   15 expr: expr OP_MINUS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 74

   16 expr: expr OP_ASTERISK . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 75

   17 expr: expr OP_SLASH . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 76

   18 expr: expr OP_PERCENTAGE . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 77

   23 expr: expr OP_EQ_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 78

   24 expr: expr OP_NOT_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 79

   19 expr: expr OP_GREATER . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 80

   21 expr: expr OP_LESSER . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 81

   20 expr: expr OP_GREATER_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 82

   22 expr: expr OP_LESSER_EQ . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 83

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 84

   36 assignexpr: lvalue OP_EQUALS . expr

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 85

   32 term: lvalue OP_PLUS_PLUS .

    $default  reduce using rule 32 (term)


State 86

   34 term: lvalue OP_MINUS_MINUS .

    $default  reduce using rule 34 (term)


State 87

   47 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 128
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 88

   58 normcall: LEFT_PAR . $@3 elist RIGHT_PAR

    $default  reduce using rule 57 ($@3)

    $@3  go to state 129


State 89

   46 member: lvalue DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 130


State 90

   60 methodcall: DOT_DOT . IDENTIFIER LEFT_PAR $@4 elist RIGHT_PAR

    IDENTIFIER  shift, and go to state 131


State 91

   52 call: lvalue callsuffix .

    $default  reduce using rule 52 (call)


State 92

   55 callsuffix: normcall .

    $default  reduce using rule 55 (callsuffix)


State 93

   56 callsuffix: methodcall .

    $default  reduce using rule 56 (callsuffix)


State 94

   49 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 132
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 95

   48 member: call DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 133


State 96

   51 call: call $@1 . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 134


State 97

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   90 ifstmt: IF LEFT_PAR expr . RIGHT_PAR stmt
   91       | IF LEFT_PAR expr . RIGHT_PAR stmt ELSE stmt

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    RIGHT_PAR      shift, and go to state 135


State 98

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   93 whilestmt: WHILE LEFT_PAR expr . RIGHT_PAR $@11 stmt

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    RIGHT_PAR      shift, and go to state 136


State 99

   95 forstmt: FOR LEFT_PAR elist . SEMICOLON expr SEMICOLON elist RIGHT_PAR $@12 stmt

    SEMICOLON  shift, and go to state 137


State 100

   80 funcdef: FUNCTION IDENTIFIER $@9 . LEFT_PAR $@10 idlist RIGHT_PAR block

    LEFT_PAR  shift, and go to state 138


State 101

   77 funcdef: FUNCTION LEFT_PAR $@8 . idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 139

    $default  reduce using rule 89 (idlist)

    idlist  go to state 140


State 102

   97 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 97 (returnstmt)


State 103

   54 call: LEFT_PAR funcdef . RIGHT_PAR $@2 LEFT_PAR elist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 141


State 104

   72 block: LEFT_BRACE $@5 RIGHT_BRACE .

    $default  reduce using rule 72 (block)


State 105

   69 func_stmt: stmt . func_stmt
   70          | stmt .

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    $default  reduce using rule 70 (func_stmt)

    stmt        go to state 105
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    func_stmt   go to state 142
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 106

   75 block: LEFT_BRACE $@6 func_stmt . RIGHT_BRACE $@7

    RIGHT_BRACE  shift, and go to state 143


State 107

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   68 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    COLON          shift, and go to state 144


State 108

   62 elist: expr COMMA . elist

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 145
    objectdef   go to state 34
    const       go to state 37


State 109

   64 objectdef: LEFT_BRACKET elist RIGHT_BRACKET .

    $default  reduce using rule 64 (objectdef)


State 110

   65 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 65 (objectdef)


State 111

   67 indexed: indexedelem COMMA . indexed

    LEFT_BRACE  shift, and go to state 60

    indexed      go to state 146
    indexedelem  go to state 64


State 112

   28 term: LEFT_PAR expr RIGHT_PAR .

    $default  reduce using rule 28 (term)


State 113

   40 primary: LEFT_PAR funcdef RIGHT_PAR .
   54 call: LEFT_PAR funcdef RIGHT_PAR . $@2 LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  reduce using rule 53 ($@2)
    $default  reduce using rule 40 (primary)

    $@2  go to state 147


State 114

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82

    $default  reduce using rule 25 (expr)


State 115

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    AND            shift, and go to state 70
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82

    $default  reduce using rule 26 (expr)


State 116

   14 expr: expr . OP_PLUS expr
   14     | expr OP_PLUS expr .
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    $default  reduce using rule 14 (expr)


State 117

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   15     | expr OP_MINUS expr .
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    $default  reduce using rule 15 (expr)


State 118

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   16     | expr OP_ASTERISK expr .
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


State 119

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   17     | expr OP_SLASH expr .
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 120

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   18     | expr OP_PERCENTAGE expr .
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 121

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   23     | expr OP_EQ_EQ expr .
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82

    OP_EQ_EQ   error (nonassociative)
    OP_NOT_EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 122

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   24     | expr OP_NOT_EQ expr .
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82

    OP_EQ_EQ   error (nonassociative)
    OP_NOT_EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 123

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   19     | expr OP_GREATER expr .
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 19 (expr)


State 124

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   21     | expr OP_LESSER expr .
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 21 (expr)


State 125

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   20     | expr OP_GREATER_EQ expr .
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 20 (expr)


State 126

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   22     | expr OP_LESSER_EQ expr .
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76

    OP_GREATER     error (nonassociative)
    OP_LESSER      error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    OP_LESSER_EQ   error (nonassociative)

    $default  reduce using rule 22 (expr)


State 127

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue OP_EQUALS expr .

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82

    $default  reduce using rule 36 (assignexpr)


State 128

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   47 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    RIGHT_BRACKET  shift, and go to state 148


State 129

   58 normcall: LEFT_PAR $@3 . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 149
    objectdef   go to state 34
    const       go to state 37


State 130

   46 member: lvalue DOT IDENTIFIER .

    $default  reduce using rule 46 (member)


State 131

   60 methodcall: DOT_DOT IDENTIFIER . LEFT_PAR $@4 elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 150


State 132

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   49 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    RIGHT_BRACKET  shift, and go to state 151


State 133

   48 member: call DOT IDENTIFIER .

    $default  reduce using rule 48 (member)


State 134

   51 call: call $@1 LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 152
    objectdef   go to state 34
    const       go to state 37


State 135

   90 ifstmt: IF LEFT_PAR expr RIGHT_PAR . stmt
   91       | IF LEFT_PAR expr RIGHT_PAR . stmt ELSE stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 153
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 136

   93 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR . $@11 stmt

    $default  reduce using rule 92 ($@11)

    $@11  go to state 154


State 137

   95 forstmt: FOR LEFT_PAR elist SEMICOLON . expr SEMICOLON elist RIGHT_PAR $@12 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 155
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 138

   80 funcdef: FUNCTION IDENTIFIER $@9 LEFT_PAR . $@10 idlist RIGHT_PAR block

    $default  reduce using rule 79 ($@10)

    $@10  go to state 156


State 139

   87 idlist: IDENTIFIER .
   88       | IDENTIFIER . COMMA idlist

    COMMA  shift, and go to state 157

    $default  reduce using rule 87 (idlist)


State 140

   77 funcdef: FUNCTION LEFT_PAR $@8 idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 158


State 141

   54 call: LEFT_PAR funcdef RIGHT_PAR . $@2 LEFT_PAR elist RIGHT_PAR

    $default  reduce using rule 53 ($@2)

    $@2  go to state 147


State 142

   69 func_stmt: stmt func_stmt .

    $default  reduce using rule 69 (func_stmt)


State 143

   75 block: LEFT_BRACE $@6 func_stmt RIGHT_BRACE . $@7

    $default  reduce using rule 74 ($@7)

    $@7  go to state 159


State 144

   68 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    expr        go to state 160
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 145

   62 elist: expr COMMA elist .

    $default  reduce using rule 62 (elist)


State 146

   67 indexed: indexedelem COMMA indexed .

    $default  reduce using rule 67 (indexed)


State 147

   54 call: LEFT_PAR funcdef RIGHT_PAR $@2 . LEFT_PAR elist RIGHT_PAR

    LEFT_PAR  shift, and go to state 161


State 148

   47 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 47 (member)


State 149

   58 normcall: LEFT_PAR $@3 elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 162


State 150

   60 methodcall: DOT_DOT IDENTIFIER LEFT_PAR . $@4 elist RIGHT_PAR

    $default  reduce using rule 59 ($@4)

    $@4  go to state 163


State 151

   49 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 49 (member)


State 152

   51 call: call $@1 LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 164


State 153

   90 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt .
   91       | IF LEFT_PAR expr RIGHT_PAR stmt . ELSE stmt

    ELSE  shift, and go to state 165

    ELSE      [reduce using rule 90 (ifstmt)]
    $default  reduce using rule 90 (ifstmt)


State 154

   93 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR $@11 . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 166
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 155

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr . SEMICOLON elist RIGHT_PAR $@12 stmt

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    SEMICOLON      shift, and go to state 167


State 156

   80 funcdef: FUNCTION IDENTIFIER $@9 LEFT_PAR $@10 . idlist RIGHT_PAR block

    IDENTIFIER  shift, and go to state 139

    $default  reduce using rule 89 (idlist)

    idlist  go to state 168


State 157

   88 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 139

    $default  reduce using rule 89 (idlist)

    idlist  go to state 169


State 158

   77 funcdef: FUNCTION LEFT_PAR $@8 idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 20

    block  go to state 170


State 159

   75 block: LEFT_BRACE $@6 func_stmt RIGHT_BRACE $@7 .

    $default  reduce using rule 75 (block)


State 160

   14 expr: expr . OP_PLUS expr
   15     | expr . OP_MINUS expr
   16     | expr . OP_ASTERISK expr
   17     | expr . OP_SLASH expr
   18     | expr . OP_PERCENTAGE expr
   19     | expr . OP_GREATER expr
   20     | expr . OP_GREATER_EQ expr
   21     | expr . OP_LESSER expr
   22     | expr . OP_LESSER_EQ expr
   23     | expr . OP_EQ_EQ expr
   24     | expr . OP_NOT_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   68 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    AND            shift, and go to state 70
    OR             shift, and go to state 71
    OP_PLUS        shift, and go to state 72
    OP_MINUS       shift, and go to state 73
    OP_ASTERISK    shift, and go to state 74
    OP_SLASH       shift, and go to state 75
    OP_PERCENTAGE  shift, and go to state 76
    OP_EQ_EQ       shift, and go to state 77
    OP_NOT_EQ      shift, and go to state 78
    OP_GREATER     shift, and go to state 79
    OP_LESSER      shift, and go to state 80
    OP_GREATER_EQ  shift, and go to state 81
    OP_LESSER_EQ   shift, and go to state 82
    RIGHT_BRACE    shift, and go to state 171


State 161

   54 call: LEFT_PAR funcdef RIGHT_PAR $@2 LEFT_PAR . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 172
    objectdef   go to state 34
    const       go to state 37


State 162

   58 normcall: LEFT_PAR $@3 elist RIGHT_PAR .

    $default  reduce using rule 58 (normcall)


State 163

   60 methodcall: DOT_DOT IDENTIFIER LEFT_PAR $@4 . elist RIGHT_PAR

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 173
    objectdef   go to state 34
    const       go to state 37


State 164

   51 call: call $@1 LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 51 (call)


State 165

   91 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 174
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 166

   93 whilestmt: WHILE LEFT_PAR expr RIGHT_PAR $@11 stmt .

    $default  reduce using rule 93 (whilestmt)


State 167

   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON . elist RIGHT_PAR $@12 stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    COL_COL         shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 61
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 175
    objectdef   go to state 34
    const       go to state 37


State 168

   80 funcdef: FUNCTION IDENTIFIER $@9 LEFT_PAR $@10 idlist . RIGHT_PAR block

    RIGHT_PAR  shift, and go to state 176


State 169

   88 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 88 (idlist)


State 170

   77 funcdef: FUNCTION LEFT_PAR $@8 idlist RIGHT_PAR block .

    $default  reduce using rule 77 (funcdef)


State 171

   68 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 68 (indexedelem)


State 172

   54 call: LEFT_PAR funcdef RIGHT_PAR $@2 LEFT_PAR elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 177


State 173

   60 methodcall: DOT_DOT IDENTIFIER LEFT_PAR $@4 elist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 178


State 174

   91 ifstmt: IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt .

    $default  reduce using rule 91 (ifstmt)


State 175

   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist . RIGHT_PAR $@12 stmt

    RIGHT_PAR  shift, and go to state 179


State 176

   80 funcdef: FUNCTION IDENTIFIER $@9 LEFT_PAR $@10 idlist RIGHT_PAR . block

    LEFT_BRACE  shift, and go to state 20

    block  go to state 180


State 177

   54 call: LEFT_PAR funcdef RIGHT_PAR $@2 LEFT_PAR elist RIGHT_PAR .

    $default  reduce using rule 54 (call)


State 178

   60 methodcall: DOT_DOT IDENTIFIER LEFT_PAR $@4 elist RIGHT_PAR .

    $default  reduce using rule 60 (methodcall)


State 179

   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR . $@12 stmt

    $default  reduce using rule 94 ($@12)

    $@12  go to state 181


State 180

   80 funcdef: FUNCTION IDENTIFIER $@9 LEFT_PAR $@10 idlist RIGHT_PAR block .

    $default  reduce using rule 80 (funcdef)


State 181

   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@12 . stmt

    INTEGER         shift, and go to state 1
    REAL            shift, and go to state 2
    STRING          shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    WHILE           shift, and go to state 6
    FOR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN          shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NOT             shift, and go to state 12
    LOCAL           shift, and go to state 13
    TRUE            shift, and go to state 14
    FALSE           shift, and go to state 15
    NIL             shift, and go to state 16
    OP_MINUS        shift, and go to state 17
    OP_PLUS_PLUS    shift, and go to state 18
    OP_MINUS_MINUS  shift, and go to state 19
    LEFT_BRACE      shift, and go to state 20
    LEFT_BRACKET    shift, and go to state 21
    LEFT_PAR        shift, and go to state 22
    SEMICOLON       shift, and go to state 23
    COL_COL         shift, and go to state 24

    stmt        go to state 182
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 182

   95 forstmt: FOR LEFT_PAR elist SEMICOLON expr SEMICOLON elist RIGHT_PAR $@12 stmt .

    $default  reduce using rule 95 (forstmt)
